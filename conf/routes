# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET     /                                  @controllers.Application.index(path="/")

GET     /timeouttest                       @controllers.Application.timeoutTest(delay:Int ?=5)
GET     /testexception                     @controllers.Application.testexception
GET     /testcaught                        @controllers.Application.testcaughtexception
GET     /system/publicdsn                  @controllers.Application.getPublicDsn
GET     /healthcheck                       @controllers.Application.healthcheck

GET     /api/file                          @controllers.Files.list(startAt:Int ?=0,length:Int ?=100)
PUT     /api/file/list                     @controllers.Files.listFiltered(startAt:Int ?=0,length:Int ?=100)
PUT     /api/file                          @controllers.Files.create
GET     /api/file/distinctowners           @controllers.Files.distinctOwners
PUT     /api/file/:id/content              @controllers.Files.uploadContent(id: Int)
GET     /api/file/:id                      @controllers.Files.getitem(id: Int)
GET     /api/file/:id/associations         @controllers.Files.references(id: Int)
PUT     /api/file/:id                      @controllers.Files.update(id: Int)
DELETE  /api/file/:id                      @controllers.Files.delete(id: Int,deleteReferenced:Boolean ?=false)
GET     /api/file/:id/checkOnDisk          @controllers.Files.checkOnDisk(id: Int)
GET     /api/file/:id/storageMetadata      @controllers.Files.fileMetadata(id:Int)
GET     /api/storage                       @controllers.StoragesController.list(startAt:Int ?=0,length:Int ?=100)
PUT     /api/storage                       @controllers.StoragesController.create
GET     /api/storage/knowntypes            @controllers.StoragesController.types
GET     /api/storage/:id                   @controllers.StoragesController.getitem(id: Int)
PUT     /api/storage/:id                   @controllers.StoragesController.update(id: Int)
DELETE  /api/storage/:id                   @controllers.StoragesController.delete(id: Int)

GET     /api/template                      @controllers.ProjectTemplateController.list(startAt:Int ?=0,length:Int ?=100)
PUT     /api/template                      @controllers.ProjectTemplateController.create
GET     /api/template/:id                  @controllers.ProjectTemplateController.getitem(id: Int)
PUT     /api/template/:id                  @controllers.ProjectTemplateController.update(id: Int)
DELETE  /api/template/:id                  @controllers.ProjectTemplateController.delete(id: Int)

GET     /api/project                        @controllers.ProjectEntryController.list(startAt:Int ?=0,length:Int ?=100)
GET     /api/project/list                   @controllers.ProjectEntryController.list(startAt:Int ?=0,length:Int ?=100)
PUT     /api/project/list                   @controllers.ProjectEntryController.listFiltered(startAt:Int ?=0,length:Int ?=100)
PUT     /api/project/advancedsearch         @controllers.ProjectEntryController.advancedSearch(startAt:Int ?=0,length:Int ?=100)
OPTIONS /api/project/advancedsearch         @controllers.ProjectEntryController.searchOptions
GET     /api/project/distinctowners         @controllers.ProjectEntryController.distinctOwners

PUT     /api/project                        @controllers.ProjectEntryController.create
PUT     /api/project/external/create        @controllers.ProjectEntryController.createExternal(force:Boolean ?=false)
GET     /api/project/by-vsid/:vsid          @controllers.ProjectEntryController.getByVsid(vsid:String)
GET     /api/project/:id/files              @controllers.ProjectEntryController.filesList(id:Int)
PUT     /api/project/:id/title              @controllers.ProjectEntryController.updateTitle(id: Int)
PUT     /api/project/:id/vsid               @controllers.ProjectEntryController.updateVsid(id: Int)
PUT     /api/project/by-vsid/:vsid/title    @controllers.ProjectEntryController.updateTitleByVsid(vsid:String)
GET     /api/project/:id                    @controllers.ProjectEntryController.getitem(id: Int)
#PUT     /api/project/:id                   @controllers.ProjectEntryController.update(id: Int)
#DELETE  /api/project/:id                   @controllers.ProjectEntryController.delete(id: Int)
POST     /api/project/validate              @controllers.ProjectEntryController.performFullValidation

GET     /api/projecttype                   @controllers.ProjectTypeController.list(startAt:Int ?=0,length:Int ?=100)
PUT     /api/projecttype                   @controllers.ProjectTypeController.create
GET     /api/projecttype/:id               @controllers.ProjectTypeController.getitem(id: Int)
GET     /api/projecttype/:id/postrun       @controllers.ProjectTypeController.listPostrun(id: Int)
PUT     /api/projecttype/:id               @controllers.ProjectTypeController.update(id: Int)
DELETE  /api/projecttype/:id               @controllers.ProjectTypeController.delete(id: Int)

GET     /api/plutoprojecttypeid            @controllers.PlutoProjectTypeController.list(startAt: Int ?=0, length:Int ?=100)
GET     /api/plutoprojecttypeid/:id        @controllers.PlutoProjectTypeController.getitem(id: Int)
PUT     /api/plutoprojecttypeid/:id/default-template/:templateId @controllers.PlutoProjectTypeController.setDefaultProjectTemplate(id:Int, templateId:Int)
DELETE  /api/plutoprojecttypeid/:id/default-template @controllers.PlutoProjectTypeController.removeDefaultProjectTemplate(id:Int)

GET     /api/postrun                   @controllers.PostrunActionController.list(startAt:Int ?=0,length:Int ?=100)
PUT     /api/postrun                   @controllers.PostrunActionController.create
GET     /api/postrun/:id               @controllers.PostrunActionController.getitem(id: Int)
GET     /api/postrun/:id/source        @controllers.PostrunActionController.getSource(id:Int)
PUT     /api/postrun/:id               @controllers.PostrunActionController.update(id: Int)
DELETE  /api/postrun/:id               @controllers.PostrunActionController.delete(id: Int)
PUT     /api/postrun/:id/projecttype/:typeid   @controllers.PostrunActionController.associate(id: Int, typeid:Int)
DELETE  /api/postrun/:id/projecttype/:typeid   @controllers.PostrunActionController.unassociate(id: Int, typeid: Int)
GET     /api/postrun/:id/depends        @controllers.PostrunActionController.listDependencies(id:Int)
PUT     /api/postrun/:id/depends/:dep   @controllers.PostrunActionController.addDependency(id:Int, dep:Int)
DELETE  /api/postrun/:id/depends/:dep   @controllers.PostrunActionController.removeDependency(id:Int, dep:Int)

GET     /api/default                    @controllers.DefaultsController.list
GET     /api/default/:key               @controllers.DefaultsController.getForKey(key:String)
PUT     /api/default/:key               @controllers.DefaultsController.putForKey(key:String)
DELETE  /api/default/:key               @controllers.DefaultsController.deleteForKey(key:String)

GET     /api/pluto/workinggroup            @controllers.PlutoWorkingGroupController.list(startAt:Int ?=0,length:Int ?=100)
GET     /api/pluto/workinggroup/:id        @controllers.PlutoWorkingGroupController.getitem(id:Int)
POST    /api/pluto/workinggroup            @controllers.PlutoWorkingGroupController.create

GET     /api/pluto/commission/:id          @controllers.PlutoCommissionController.getitem(id:Int)
GET     /api/pluto/commission               @controllers.PlutoCommissionController.list(startAt:Int ?= 0,length:Int ?=100)

POST    /api/pluto/commission              @controllers.PlutoCommissionController.createPluto
POST    /api/prexit/commission             @controllers.PlutoCommissionController.regularUserCreate
PUT     /api/pluto/commission/list         @controllers.PlutoCommissionController.listFiltered(startAt:Int ?=0, length:Int ?=100)
OPTIONS /api/pluto/commission/list          @controllers.PlutoCommissionController.listOptions

GET     /api/pluto/rescan                   @controllers.PlutoWorkingGroupController.rescan

POST    /api/login                         @controllers.Application.authenticate
OPTIONS /api/login                         @controllers.Application.authenticateOptions
POST    /api/logout                        @controllers.Application.logout
GET     /api/isLoggedIn                    @controllers.Application.isLoggedIn
GET     /api/isAdmin                       @controllers.Application.checkIsAdmin

GET     /api/system/plutoconfig            @controllers.System.plutoconfig

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)
GET     /*tail                      @controllers.Application.index(tail)